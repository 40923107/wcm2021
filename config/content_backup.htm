<h1>WCM2021 </h1>
<p>組員：<span>40923102、40923104、40923105、40923106、40923107、40923110</span></p>
<h1>每週課程</h1>
<h2>W1</h2>
<p>至 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a> 下載 Python 3.9.1 版的可攜程式系統 kmol2021_v2_spring</p>
<p><img alt="" height="293" src="/images/下載 .png" width="326"/></p>
<p>從 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a> 取下 Python 3.9.1 版的可攜程式系統，特別將需要 @gm 權限的兩階段程式系統，從 @gm 移動到 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a>，其中使用 sftp 與 ssh 對 a.kmol.info 進行連線。</p>
<p>用電腦教室第三磁區上課時使用 IPv6 網路協定上線，不過因為 Python 會自動用 Windows 系統中設定的 Proxy，在 Python 3.8.5 可以直接執行連結到 IPv4 網站的程式。</p>
<h2>W2</h2>
<p>Repository:<a href="https://github.com/40923107/wcm2021">https://github.com/40923107/wcm2021</a></p>
<p>Github Pages:<a href="https://40923107.github.io/wcm2021/content/index.html">https://40923107.github.io/wcm2021/content/index.html</a></p>
<p>用 cmstemplate 建立以 CMSiMDE 作為子模組的動態與靜態網站：</p>
<p>1.登入 Github 帳號</p>
<p>2.將瀏覽器指向<span> <a href="https://github.com/40923107/wcm2021">https://github.com/40923107/wcm2021</a></span></p>
<p>3.利用<span> </span><span>Use this template</span><span> </span>建立倉儲</p>
<p>clone 帶有 CMSiMDE 的指令:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_298274">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">git clone --recurse-submodules URL</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>將倉儲資料取下進行改版的 Github 倉儲網路統一資源位置，也就是 Github 倉儲網址。</p>
<p>每一個以 cmstemplate 為 template 的倉儲，根目錄都帶有:</p>
<p>1.<span style="background-color: #ffff00;">init.py</span> - 其中的 site_title, ip 與 port 可以讓使用者自行修改, site_title 是網站標題, ip 為動態網站啟動時所使用的網路位址, 可設為內部或外部 IPv4 (IPv6), port 則是動態網站啟動時所佔用的埠號.</p>
<p>2.<span style="background-color: #ffff00;">http-server.py</span> - 執行後會使用內建的 localhost 與 port 8444 伺服 content 子目錄中的 CMSiMDE 靜態網頁.</p>
<p>3.<span style="background-color: #ffff00;">cms.bat</span> - 讓使用者執行動態網站用的批次檔案.</p>
<p>4.<span style="background-color: #ffff00;">acp.bat </span>- 若使用者已經將倉儲設為 ssh 連線，且提供遠端與近端的認證模式，則可以在執行此批次指令之後加上提交字串，即可執行 git add，git commit -m "提交訊息"，以及 git push 等三個指令.</p>
<p></p>
<h3><strong>基本操作</strong></h3>
<p>利用 cms.bat 啟用動態網站，利用<a>https://localhost:9443</a> 在近端維護網站內容，用 "admin" 登入管理網站內容。</p>
<h3><strong>編輯網站內容</strong></h3>
<p>透過表單中的 <span style="background-color: #ffff00;">Edit All </span>或 <span style="background-color: #ffff00;">Edit </span>按鈕進行。 <span style="background-color: #ffff00;">Edit</span><span> </span>用在單頁編輯，先選擇左側的頁面標題，等顯示內容後, 再點上方的<span> </span><span style="background-color: #ffff00;">Edit </span>進入編輯模式.</p>
<p><span style="background-color: #ffff00;">Edit All </span>用在單次刪除所有頁面內容，或只保留特定頁面用，點擊後會將所有頁面內容置於編輯器中。</p>
<p></p>
<h3><strong>上傳與引用檔案</strong></h3>
<p><span style="background-color: #ffff00;">File Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p></p>
<h3><strong>上傳與引用圖片</strong></h3>
<p><span style="background-color: #ffff00;">Image Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄。</p>
<p><span><img caption="false" height="267" src="/images/圖片上傳.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳2.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳3.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳4.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳5.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳6.png" width="475"/></span></p>
<div></div>
<p><span></span></p>
<h2>W3</h2>
<p>到 mde.tw 的 cmstemplate網站中，了解倉儲中常見的問題</p>
<h2>W4</h2>
<p>自選組員，6 人一組</p>
<p>組員：40923102、40923104、40923105、40923106、40923107、40923110</p>
<h2>W5</h2>
<p><span>將cmsimde更新到最新版本：</span></p>
<p><span>先進入 cmsimde 子目錄, 打git pull origin master，拉回最新版本的程式碼,，從 up_dir 複製到倉儲根目錄。</span></p>
<p><span>利用 Putty 設定以 SSH 把近端版本推送至 Github</span></p>
<p>1.登入 Github ，選擇帳號右下方 Settings - SSH and GPG keys 備用</p>
<p><img caption="false" height="281" src="/images/ssh key 1.png" width="500"/></p>
<p>2.在 start_ipv6.bat 加入<span> </span><span>set GIT_SSH=%Disk%:\putty\plink.exe</span></p>
<p>3.開 Putty 目錄中的 puttygen.exe，點 Generate，滑鼠在上方空白處隨意移動，建立 key，選擇 key 區域中的文字資料，複製到 SciTE 編輯區，存成  id_rsa 檔，再複製貼到 Github SSH key 儲存。</p>
<p><img alt="" height="281" src="/images/ssh key 2.png" width="500"/></p>
<p>4.在 puttygen.exe 視窗下方, 選擇<span> </span><span>Save private key</span><span> </span>, 將 key 存為 my_key.ppk 或"學號.ppk"備用.</p>
<p>5.在 putty.exe 中建立一個 session，用於以 ssh 協定連線到 github.com，自訂session名稱，必須與倉儲 .git 目錄中 config 的連線 url session 名稱對應.</p>
<p>6.注意SSH 中的 Auth 是否對應到前面存檔的 .ppk private key 位置.</p>
<p>7.Github session 設定完成後, 從 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\my_github.reg, 並在 start_ipv6.bat 中以  regedit.exe /S y:\my_github.reg 將設定匯入.</p>
<p><span> </span></p>
<h2>W6</h2>
<p><span>建立 Heroku 帳號：</span>進入<span> </span><a href="https://heroku.com/">https://heroku.com</a>，用學校gmail登記一個 Heroku 帳號。</p>
<p>去<span> </span><a href="http://a.kmol.info:88/">http://a.kmol.info:88</a><span> ，下載heroku.7z</span></p>
<h2><span>W7</span></h2>
<h3>Heroku</h3>
<p><span>1.</span><span>建立 Heroku app：</span>登入 Heroku 後, 以 s + 學號建立第一個 app。</p>
<p><span>2.</span><span>下</span>載 Heroku CLI：從<span> </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span> </span>下載 Heroku cli 程式檔案, 解壓縮到電腦。</p>
<p><span>3.</span><span>修改命令搜尋路徑：</span> 修改隨身系統的啟動批次檔案，讓 Windows 的命令視窗中可以執行 heroku.exe，（將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一），再重新啟動start_ipv4 / ipv6.bat</p>
<p>4.<span>測試 heroku 執行：打</span> heroku version 看有沒有回應使用版本。</p>
<p><span>5.</span><span>設定 heroku 代理主機：</span>在 y:\home_ipv6 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>在 start_ipv6.bat 中加入:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_610730">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">REM </code><code class="js keyword">for</code> <code class="js plain">heroku login</code></div>
<div class="line number2 index1 alt1"><code class="js plain">set HTTP_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">set HTTPS_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span>6.設定同步倉儲：</span>透過 git remote add (Heroku 指令：heroku git:remote -a heroku_倉儲_名稱，之後在 heroku login 狀態下，直接用 git push) 在近端設定一個連線到 Heroku 倉儲的代號，在每次更新 Github Pages 倉儲後，把同步至 Heroku。</p>
<p><span>7.</span><span>以 git 進行提交推送：</span>用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 用 git push heroku 將改版內容推送到對應的 Heroku app 倉儲.</p>
<p>指令操作步驟:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_615811">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</code></div>
<div class="line number2 index1 alt1"><code class="py plain">heroku login </code><code class="py keyword">-</code><code class="py plain">i</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.</code></div>
<div class="line number4 index3 alt1"><code class="py plain">heroku git:remote </code><code class="py keyword">-</code><code class="py plain">a taiwan</code><code class="py keyword">-</code><code class="py plain">no1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>Heroku 網站 : <a href="https://dashboard.heroku.com/apps/s40923107">https://dashboard.heroku.com/apps/s40923107</a></p>
<p></p>
<h2>w8</h2>
<p></p>
<p></p>
<p><span></span></p>
<p></p>