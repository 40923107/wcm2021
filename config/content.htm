<h1>About</h1>
<p>This is <a href="https://github.com/mdecourse/cmstemplate">https://github.com/mdecourse/cmstemplate</a></p>
<p>目前的 cmsimde 在編輯器下方新增一個 csave 按鈕, 意即 collabrative save, 當動態網際管理系統在多人同時維護登入維護網頁內容時, 編輯各頁面時段, 該頁面可能已經改版, 因此使用 csave 按鈕存檔時, 會導入當下最新的該頁面內容, 並試圖與編輯中的頁面內容進行合併.</p>
<p>使用 csave 按鈕存檔無法刪除頁面資料.</p>
<p>使用 Edit All 模式, 無法使用 csave 按鈕（尚未測試).</p>
<h1>每週課程</h1>
<h2>W1</h2>
<p>至 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a> 下載 Python 3.9.1 版的可攜程式系統 kmol2021_v2_spring</p>
<p><img alt="" height="293" src="/images/下載 .png" width="326"/></p>
<p>從 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a> 取下 Python 3.9.1 版的可攜程式系統, 特別將需要 @gm 權限的兩階段程式系統, 從 @gm 移動到 <a href="http://a.kmol.info:88/">http://a.kmol.info:88</a>, 其中使用 sftp 與 ssh 對 a.kmol.info 進行連線。</p>
<p>用電腦教室第三磁區上課時使用 IPv6 網路協定上線，不過因為 Python 會自動用 Windows 系統中設定的 Proxy，在 Python 3.8.5 可以直接執行連結到 IPv4 網站的程式。</p>
<h2>W2</h2>
<p>CMSiMDE (<a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a>) 是一套以 Python 與 Flask 框架編寫的網際內容管理系統,使用 CMSiMDE 建議使用者安裝 flask flask_cors bs4 lxml pelican markdown leo 等模組. 其中的 flask flask_cors bs4 lxml pelican markdown為啟動 CMSiMDE 的必要模組, 而 leo 則是 CMSMDE 開發者所使用的大綱管理工具, 可以用於與 CMSiMDE 整合的 Pelican blog 及 Reveal.js 網際簡報編輯之用.</p>
<p></p>
<p>Repository:<a href="https://github.com/40923107/wcm2021">https://github.com/40923107/wcm2021</a></p>
<p>Github Pages:<a href="https://40923107.github.io/wcm2021/content/index.html">https://40923107.github.io/wcm2021/content/index.html</a></p>
<p></p>
<p>利用 cmstemplate 建立以 CMSiMDE 作為子模組的動態與靜態網站：</p>
<p>1.登入 Github 帳號</p>
<p>2.將瀏覽器指向<span> <a href="https://github.com/40923107/wcm2021">https://github.com/40923107/wcm2021</a></span></p>
<p>3.利用<span> </span><span>Use this template</span><span> </span>建立倉儲</p>
<p>clone 帶有 CMSiMDE 的指令:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_298274">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">git clone --recurse-submodules URL</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>上述 URL 即為希望將倉儲資料取下進行改版的 Github 倉儲網路統一資源位置, 也就是 Github 倉儲網址.</p>
<p>每一個以 cmstemplate 為 template 的倉儲, 其根目錄都帶有:</p>
<p>1.<span style="background-color: #ffff00;">init.py</span> - 其中的 site_title, ip 與 port 可以讓使用者自行修改, site_title 是網站標題, ip 為動態網站啟動時所使用的網路位址, 可設為內部或外部 IPv4 (IPv6), port 則是動態網站啟動時所佔用的埠號.</p>
<p>2.<span style="background-color: #ffff00;">http-server.py</span> - 執行後會使用內建的 localhost 與 port 8444 伺服 content 子目錄中的 CMSiMDE 靜態網頁.</p>
<p>3.<span style="background-color: #ffff00;">cms.bat</span> - 讓使用者執行動態網站用的批次檔案.</p>
<p>4.<span style="background-color: #ffff00;">acp.bat </span>- 若使用者已經將倉儲設為 ssh 連線, 且提供遠端與近端的認證模式, 則可以在執行此批次指令之後加上提交字串, 即可執行 git add ., git commit -m "提交訊息", 以及 git push 等三個指令.</p>
<p></p>
<h3><strong>基本操作</strong></h3>
<p>利用 cms.bat 啟用動態網站，並利用<a>https://localhost:9443</a> 在近端維護網站內容，不過動態網站只能在 localhost 啟動, 因此可以用內建的管理者密碼 "admin" 登入管理網站內容.</p>
<p>假如使用者修改 init.py 中的 ip 或 uwsgi 設定, 讓動態網站在外部 IP 啟動, 則必須自行透過動態網站中的 config 指令修改管理者密碼.</p>
<p>動態網站編輯表單中的 config 除了可更改網站管理者密碼外, 也可以更改網站的頁面內容標題 (外部標題可以透過 init.py 中的 site_title 更改).</p>
<h3><strong>編輯網站內容</strong></h3>
<p>透過表單中的 <span style="background-color: #ffff00;">Edit All </span>或 <span style="background-color: #ffff00;">Edit </span>按鈕進行. <span style="background-color: #ffff00;">Edit</span><span> </span>用在單頁編輯, 操作時先選擇左側的頁面標題, 等系統顯示該頁面內容後, 再點擊上方的<span> </span><span style="background-color: #ffff00;">Edit </span>按鈕進入該頁面的編輯模式.</p>
<p><span style="background-color: #ffff00;">Edit All </span>通常用在單次刪除所有頁面內容或只保留特定頁面用, 點擊後會將所有頁面內容置於編輯器中。</p>
<p></p>
<h3><strong>上傳與引用檔案</strong></h3>
<p><span style="background-color: #ffff00;">File Upload</span> 可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p></p>
<h3><strong>上傳與引用圖片</strong></h3>
<p><span style="background-color: #ffff00;">Image Upload </span>可以讓使用者選擇近端多個檔案上傳至動態系統中的 downloads 目錄.</p>
<p><span><img caption="false" height="267" src="/images/圖片上傳.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳2.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳3.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳4.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳5.png" width="475"/></span></p>
<p><span></span></p>
<p><span><img alt="" height="267" src="/images/圖片上傳6.png" width="475"/></span></p>
<div></div>
<p><span></span></p>
<h2>W3</h2>
<p></p>
<h2>W4</h2>
<p>自選組員`,6 人一組</p>
<p>組員：40923102、40923104、40923105、40923106、40923107、40923110</p>
<h2>W5</h2>
<p><span>將cmsimde更新到最新版本：</span></p>
<p><span>先進入 cmsimde 子目錄, 打git pull origin master，拉回最新版本的程式碼,，從 up_dir 複製到倉儲根目錄。</span></p>
<p><span>利用 Putty 設定以 SSH 把近端版本推送至 Github</span></p>
<p>1.登入 Github ，選擇帳號右下方 Settings - SSH and GPG keys 備用</p>
<p><img caption="false" height="281" src="/images/ssh key 1.png" width="500"/></p>
<p>2.在 start_ipv4.bat 加入<span> </span><span>set GIT_SSH=%Disk%:\putty\plink.exe</span></p>
<p>3.開啟 Putty 目錄中的 puttygen.exe, 點 Generate , 讓滑鼠在上方空白處隨意移動, 建立 key, 利用滑鼠選擇 key 區域中的文字資料, 複製到 SciTE 編輯區, 存為  id_rsa 檔, 並將此內容貼至 Github SSH key 欄位中後儲存.</p>
<p><img alt="" height="281" src="/images/ssh key 2.png" width="500"/></p>
<p>4.在 puttygen.exe 視窗下方, 選擇<span> </span><span>Save private key</span><span> </span>, 將 key 存為 my_key.ppk 或"學號.ppk"備用.</p>
<p>5.在 putty.exe 中建立一個 session, 用於以 ssh 協定連線到 github.com,  session 名稱自訂, 必須與倉儲 .git 目錄中 config 的連線 url session 名稱對應.</p>
<p>6.注意SSH 中的 Auth 是否對應到前面存檔的 .ppk private key 位置.</p>
<p>7.Github session 設定完成後, 可以從 [HKEY_CURRENT_USER\SOFTWARE\SimonTatham] 將 registry 設定匯出存為 y:\my_github.reg, 並在 start_ipv6.bat 中以  regedit.exe /S y:\my_github.reg 將設定匯入.</p>
<p><span> </span></p>
<h2>W6</h2>
<h2><span>W7</span></h2>
<h1>Heroku-實作</h1>
<p><span>步驟一:</span><span> </span>(<span>建立 Heroku 帳號</span>) 進入<span> </span><a href="https://heroku.com/">https://heroku.com</a>, 利用學校配發的 @gm 登記一個 Heroku 帳號, 關鍵在於密碼設定必須要至少 8 個字元, 且字元中必須包含符號, 英文字母及數字,  並且登記後要進入 @gm 帳號進行確認後才能開通 Heroku 帳號.</p>
<p>完成帳號登記後, 必須知道目前 Heroku 只允許免費建立五個應用程式, 且每個程式的最大容量為 500MB.</p>
<p><span>步驟二:</span><span> </span>(<span>建立 Heroku app</span>) 登入 Heroku 後, 先以 s + 學號 建立第一個 app, 完成後, 將可至 https://s學號.herokuapp.com 連線取得網站最初內容.</p>
<p><span>步驟三:</span><span> </span>(下載 Heroku CLI) 從<span> </span><a href="http://a.kmol.info:88/heroku.7z">http://a.kmol.info:88/heroku.7z</a><span> </span>下載 Heroku cli 程式檔案, 解開至隨身碟 Y: 所在位置或者是 Hybrid 設定的位置.</p>
<p><span>步驟四:</span><span> </span>(<span>修改命令搜尋路徑</span>) 修改隨身系統的啟動批次檔案, 讓 Windows 的命令視窗中可以執行 heroku.exe, 或者稱作"設法將 heroku.exe 所在目錄位置, 設為 Windows 搜尋路徑之一".</p>
<p>重新啟動已經納入可執行 heroku.exe 的隨身碟 start_ipv6.bat 或 start_ipv4.bat</p>
<p><span>步驟五:</span><span> </span>(<span>測試 heroku 執行</span>) 測試是否能夠在修改後的命令列中執行 heroku.exe, 輸入 heroku version 若回應所使用的版本表示上述路徑設定已經成功.</p>
<p><span>步驟六:</span><span> </span>(<span>設定 heroku 代理主機</span>) 先前我們已經知道網路的應用包含 client 與 server, 不同 client 採用不同的 proxy 設定與 server 連線, 其中 firefox 作為 WWW 網路協定的 client, 有其自己的網路 Proxy 設定, 也可以直接使用操作系統的 Proxy 設定.</p>
<p>Chrome 作為 WWW 網路協定的 client, 目前 Windows 下的最新版, 只能使用操作系統的 Proxy 設定.</p>
<p>而 git 作為 git client 與 github server 連線的 Proxy 設定, 則寫在 y:\home_ipv6 下的 .giconfig 中,  以 git config --global http.proxy "http://your_proxy:port" 進行設定.</p>
<p>相同的道理 heroku cli 作為<span> </span><a href="https://heroku.com/">https://heroku.com</a><span> </span>伺服器的 client 端, 也有其 Proxy 的設定方式, 也就是在 start_ipv6.bat 中加入:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_610730">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">REM </code><code class="js keyword">for</code> <code class="js plain">heroku login</code></div>
<div class="line number2 index1 alt1"><code class="js plain">set HTTP_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
<div class="line number3 index2 alt2"><code class="js plain">set HTTPS_PROXY=http:</code><code class="js comments">//[2001:288:6004:17::53]:3128</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p><span>步驟七:</span><span> </span>(<span>設定同步倉儲</span>) 針對利用 Heroku 同步 Github Pages 上的網站內容, 只需要透過 git remote add (Heroku 指令為 heroku git:remote -a heroku_倉儲_名稱, 之後只要在 heroku login 狀態下, 可以直接利用 git push) 在近端設定一個連線到 Heroku 倉儲的代號, 就能在每次更新 Github Pages 倉儲後, 再將內容同步至 Heroku. 網際內容管理課程將使用兩種 Heroku app 設定, 也就是靜態網頁與動態網頁:</p>
<p>靜態網頁 - 採用 php 方式部署, 讓 Heroku 將靜態網頁視為 PHP 程式, 利用 index.php 跳轉到 index.html</p>
<p>動態網頁 - 讓 Heroku 執行 cmsimde/wsgi.py 的方式進行雲端伺服.</p>
<p><span>步驟八:</span><span> </span>(<span>以 git 進行提交推送</span>) 利用 heroku git:remote -a 設定的同步倉儲其推送名稱內定為 "heroku", 使用者只要使用 git push heroku 就可以將改版內容推送到對應的 Heroku app 倉儲.</p>
<p>指令操作步驟:</p>
<div>
<div class="syntaxhighlighter py" id="highlighter_615811">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="py comments"># 以 interactive 模式登入 Heroku, 完成後產生 y:\home_ipv6\_netrc</code></div>
<div class="line number2 index1 alt1"><code class="py plain">heroku login </code><code class="py keyword">-</code><code class="py plain">i</code></div>
<div class="line number3 index2 alt2"><code class="py comments"># 針對已經登入的 Heroku 帳號下的 taiwan-01 app, 設為此倉儲的 remote 同步倉儲, 且在倉儲中會自建名稱為 heroku 的 remoate site.</code></div>
<div class="line number4 index3 alt1"><code class="py plain">heroku git:remote </code><code class="py keyword">-</code><code class="py plain">a taiwan</code><code class="py keyword">-</code><code class="py plain">no1</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>上述步驟完成後的 Heroku 網站:<span> </span><a href="https://taiwan-no1.herokuapp.com/">https://taiwan-no1.herokuapp.com</a></p>
<p><span></span></p>
<p></p>